-- Create Roles Table
CREATE TABLE roles_2325 (
    role_id SERIAL PRIMARY KEY,
    role_type VARCHAR(255) NOT NULL
);

-- Create Entities Table
CREATE TABLE entities_2325 (
    entity_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    jurisdiction VARCHAR(255),
    jurisdiction_description VARCHAR(255),
    country_code VARCHAR(3),
    country_name VARCHAR(100),
    incorporation_date DATE,
    inactivation_date DATE,
    struck_off_date DATE,
    closed_date DATE,
    ibc_ruc VARCHAR(255),
    status VARCHAR(255),
    company_type VARCHAR(255),
    service_provider VARCHAR(255),
    source_id VARCHAR(255),
    valid_until VARCHAR(255),
    note TEXT
);

-- Create Officers Table
CREATE TABLE officers_2325 (
    officer_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    country_code VARCHAR(3),
    country_name VARCHAR(100),
    source_id VARCHAR(255),
    valid_until VARCHAR(255),
    note VARCHAR(255)
);

-- Create RolesOfficer Table (Many-to-Many Relationship)
CREATE TABLE roles_officer_2325 (
    officer_role_id SERIAL PRIMARY KEY,
    officer_id INTEGER REFERENCES officers_2325(officer_id),
    entity_id INTEGER REFERENCES entities_2325(entity_id),
    role_id INTEGER REFERENCES roles_2325(role_id)
);

-- Create Intermediaries Table
CREATE TABLE intermediaries_2325 (
    intermediary_id SERIAL PRIMARY KEY,
    node_id INTEGER UNIQUE NOT NULL,
    -- Other attributes (nullable as needed)
);

-- Create Addresses Table
CREATE TABLE addresses_2325 (
    address_id SERIAL PRIMARY KEY,
    node_id INTEGER UNIQUE NOT NULL,
    name VARCHAR(255), -- Nullable
    -- Other attributes (nullable as needed)
);

-- Create IntermediaryOffshoreEntities Table (Many-to-Many Relationship)
CREATE TABLE IntermediaryOffshoreEntities_2325 (
    intermediary_offshore_entity_id SERIAL PRIMARY KEY,
    intermediary_id INTEGER REFERENCES Intermediaries(intermediary_id),
    offshore_entity_id INTEGER REFERENCES OffshoreEntities(offshore_entity_id)
);

-- Create OfficerAddresses Table (Many-to-Many Relationship)
CREATE TABLE OfficerAddresses_2325 (
    officer_address_id SERIAL PRIMARY KEY,
    officer_id INTEGER REFERENCES Officers(officer_id),
    address_id INTEGER REFERENCES Addresses(address_id)
);
******************************
-- Countries Table
CREATE TABLE Countries (
    CountryID INT PRIMARY KEY,
    CountryCode VARCHAR(3) NOT NULL,
    CountryName VARCHAR(255) NOT NULL
);

-- Other Table
CREATE TABLE YourTable (
    ...
    CountryID INT,
    ...
    FOREIGN KEY (CountryID) REFERENCES Countries(CountryID)
);

******************************

-- DataSources Table
CREATE TABLE DataSources (
    SourceID INT PRIMARY KEY,
    SourcePhrase VARCHAR(255) NOT NULL
);

-- Other Table
CREATE TABLE YourTable (
    ...
    SourceID INT,
    ...
    FOREIGN KEY (SourceID) REFERENCES DataSources(SourceID)
);

******************************
CREATE TABLE YourTable (
    ...
    PhraseColumn VARCHAR(255),
    ...
);


The design includes multiple tables to represent different entities and relationships between them. Let me explain the rationale behind each table:

Roles Table:

Holds distinct roles (e.g., protector, beneficiary, shareholder, director).
Enables flexibility in adding new roles without altering the schema.

OffshoreEntities Table:

Represents offshore entities.
Each entity has a unique identifier (offshore_entity_id), and its details are stored here.


Officers Table:

Represents officers, whether individuals or companies.
Each officer has a unique identifier (officer_id), and its details are stored here.


Intermediaries Table:

Represents intermediaries, typically law firms or middlemen.
Each intermediary has a unique identifier (intermediary_id), and its details are stored here.


Addresses Table:

Holds postal addresses of officers.
Each address has a unique identifier (address_id), and its details are stored here.


RolesOfficer Table (Many-to-Many Relationship):

Links officers with roles in multiple offshore entities.
Uses foreign keys to connect to the Officers, OffshoreEntities, and Roles tables.



IntermediaryOffshoreEntities Table (Many-to-Many Relationship):

Links intermediaries with multiple offshore entities.
Uses foreign keys to connect to the Intermediaries and OffshoreEntities tables.


OfficerAddresses Table (Many-to-Many Relationship):

Links officers with multiple addresses.
Uses foreign keys to connect to the Officers and Addresses tables.
The reason for using separate tables is to maintain a normalized database structure, which offers advantages such as minimizing data redundancy, improving data integrity, and facilitating efficient query operations.

The use of many-to-many relationship tables allows for flexibility in representing relationships between entities. This design supports scenarios where officers have multiple roles in different offshore entities, intermediaries are related to multiple offshore entities, and officers may have multiple addresses.

While the design includes several tables, each table serves a specific purpose and contributes to organizing the data in a structured manner, adhering to best practices in relational database design.






